#include <boost/multiprecision/miller_rabin.hpp>
#include <boost/random/mersenne_twister.hpp>

#include <fstream>

using namespace boost::multiprecision;
using namespace boost::random;

namespace {
const int BIT_SIZE = 2048;

cpp_int GetPrime() {
  mt11213b base_gen(clock());
  independent_bits_engine<mt11213b, BIT_SIZE, cpp_int> gen(base_gen);

  // Generate some large random primes
  // Note 25 trials of Miller-Rabin
  // likelihood that number is prime
  cpp_int n;
  do {
    n = gen();
  } while (!miller_rabin_test(n, 25));
  return n;
}
} // namespace

int main() {
  std::ofstream fileHandler;
  fileHandler.open("prime_number_file.txt");

  for(int i = 0; i < 100; ++i) {
  // Generate a secret RSA-like 512 bits primes p
  auto prime = GetPrime();
  fileHandler << prime.str() << std::endl;
  }
  
  fileHandler.close();
}
